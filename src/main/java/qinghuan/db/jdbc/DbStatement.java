package qinghuan.db.jdbc;

import qinghuan.db.model.Row;
import qinghuan.db.query.Query;
import qinghuan.db.query.QueryExecutor;
import qinghuan.db.query.QueryParser;

import java.sql.*;
import java.util.List;

public class DbStatement implements Statement {
    private final DbConnection connection;
    private final QueryParser parser;
    private final QueryExecutor executor;
    private ResultSet currentResultSet;

    public DbStatement(DbConnection connection, QueryParser parser, QueryExecutor executor) {
        this.connection = connection;
        this.parser = parser;
        this.executor = executor;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        try {
            Query query = parser.parse(sql);
            if (!query.getType().equals("SELECT")) {
                throw new SQLException("Not a SELECT query: " + sql);
            }
            List<Row> rows = executor.execute(query);
            currentResultSet = new DbResultSet(rows);
            return currentResultSet;
        } catch (Exception e) {
            throw new SQLException("Failed to execute query: " + sql, e);
        }
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        try {
            Query query = parser.parse(sql);
            if (query.getType().equals("SELECT")) {
                throw new SQLException("Not an update query: " + sql);
            }
            executor.execute(query);
            return 1; // 简化为固定返回值
        } catch (Exception e) {
            throw new SQLException("Failed to execute update: " + sql, e);
        }
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        try {
            Query query = parser.parse(sql);
            if (query.getType().equals("SELECT")) {
                executeQuery(sql);
                return true;
            } else {
                executeUpdate(sql);
                return false;
            }
        } catch (Exception e) {
            throw new SQLException("Failed to execute: " + sql, e);
        }
    }

    @Override
    public void close() throws SQLException {
        currentResultSet = null;
    }

    // 其他方法省略，实现时需补充
    @Override
    public int getMaxFieldSize() throws SQLException {
        return 0;
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
    }

    @Override
    public int getMaxRows() throws SQLException {
        return 0;
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return 0;
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
    }

    @Override
    public void cancel() throws SQLException {
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public void clearWarnings() throws SQLException {
    }

    @Override
    public void setCursorName(String name) throws SQLException {
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return currentResultSet;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return -1;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return false;
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return 0;
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
    }

    @Override
    public int getFetchSize() throws SQLException {
        return 0;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return 0;
    }

    @Override
    public int getResultSetType() throws SQLException {
        return 0;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
    }

    @Override
    public void clearBatch() throws SQLException {
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return new int[0];
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return false;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return null;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return execute(sql);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return execute(sql);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return execute(sql);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return 0;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return false;
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return false;
    }

    @Override
    public void closeOnCompletion() throws SQLException {
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }
}
